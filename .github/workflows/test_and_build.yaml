name: Test and build

on:
  push:
    branches: [master]

jobs:
  go-setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.23.3

      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Verify Dependencies
        run: go mod verify

      - name: Build
        run: go build -v ./...

      - name: Run go vet
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

      - name: Run Tests
        run: go test -race ./...

  backend-docker:
    needs: go-setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: backend-${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            backend-${{ runner.os }}-buildx-

      - name: Build Docker Image for Backend
        run: |
          docker buildx create --use
          docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache \
                              --cache-to=type=local,dest=/tmp/.buildx-cache \
                              --tag ghcr.io/k5sha/ticketo-backend:latest \
                              --output=type=docker .

      - name: Push Docker Image for Backend to GHCR
        run: |
          echo ${{ secrets.MY_GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/k5sha/ticketo-backend:latest

  frontend-docker:
    needs: go-setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-frontend
          key: frontend-${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            frontend-${{ runner.os }}-buildx-

      - name: Build Docker Image for Frontend
        run: |
          docker buildx create --use
          docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache-frontend \
                              --cache-to=type=local,dest=/tmp/.buildx-cache-frontend \
                              --tag ghcr.io/k5sha/ticketo-frontend:latest \
                              --output=type=docker ./web

      - name: Push Docker Image for Frontend to GHCR
        run: |
          echo ${{ secrets.MY_GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/k5sha/ticketo-frontend:latest

  deploy-to-vps:
    needs: [backend-docker, frontend-docker]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Create .env file on VPS using SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" > /home/k5sha/Tikceto/.env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> /home/k5sha/Tikceto/.env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> /home/k5sha/Tikceto/.env
  
            echo "MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}" >> /home/k5sha/Tikceto/.env
            echo "MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}" >> /home/k5sha/Tikceto/.env
            echo "MINIO_USE_SSL=false" >> /home/k5sha/Tikceto/.env
            echo "MINIO_DEFAULT_BUCKETS=${{ secrets.MINIO_DEFAULT_BUCKETS }}" >> /home/k5sha/Tikceto/.env
  
            echo "ENV=production" >> /home/k5sha/Tikceto/.env
            echo "ADDR=0.0.0.0:8080" >> /home/k5sha/Tikceto/.env
            echo "EXTERNAL_URL=${{ secrets.EXTERNAL_URL }}" >> /home/k5sha/Tikceto/.env
            echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> /home/k5sha/Tikceto/.env
            echo "DB_ADDR=${{ secrets.DB_ADDR }}" >> /home/k5sha/Tikceto/.env
  
            echo "AUTH_BASIC_USERNAME=${{ secrets.AUTH_BASIC_USERNAME }}" >> /home/k5sha/Tikceto/.env
            echo "AUTH_BASIC_PASSWORD=${{ secrets.AUTH_BASIC_PASSWORD }}" >> /home/k5sha/Tikceto/.env
            echo "AUTH_TOKEN_SECRET=${{ secrets.AUTH_TOKEN_SECRET }}" >> /home/k5sha/Tikceto/.env
            echo "AUTH_TOKEN_HOST=ticketo" >> /home/k5sha/Tikceto/.env
  
            echo "MAIL_TOKEN_EXPIRATION=1h" >> /home/k5sha/Tikceto/.env
            echo "MAIL_FROM_EMAIL=${{ secrets.MAIL_FROM_EMAIL}}" >> /home/k5sha/Tikceto/.env
            
            echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> /home/k5sha/Tikceto/.env
            echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME}}" >> /home/k5sha/Tikceto/.env
  
            echo "S3_BUCKET_NAME=${{ secrets.MINIO_DEFAULT_BUCKETS }}" >> /home/k5sha/Tikceto/.env
            echo "MINIO_ENDPOINT=${{ secrets.MINIO_ENDPOINT }}" >> /home/k5sha/Tikceto/.env
            echo "MINIO_ENDPOINT_PUBLIC=${{ secrets.MINIO_ENDPOINT_PUBLIC }}" >> /home/k5sha/Tikceto/.env
            echo "MINIO_SSL=false" >> /home/k5sha/Tikceto/.env
  
            echo "PAYMENT_PUBLIC_KEY=${{ secrets.PAYMENT_PUBLIC_KEY }}" >> /home/k5sha/Tikceto/.env
            echo "PAYMENT_PRIVATE_KEY=${{ secrets.PAYMENT_PRIVATE_KEY }}" >> /home/k5sha/Tikceto/.env
            echo "PAYMENT_FRONTEND_URL=${{ secrets.PAYMENT_FRONTEND_URL }}" >> /home/k5sha/Tikceto/.env
            echo "PAYMENT_SERVER_URL=${{ secrets.PAYMENT_SERVER_URL }}" >> /home/k5sha/Tikceto/.env
  
            echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> /home/k5sha/Tikceto/.env
            echo "VITE_APP_NAME=Ticketo" >> /home/k5sha/Tikceto/.env

            echo "TS_AUTHKEY=${{ secrets.TS_AUTHKEY }}" >> /home/k5sha/Tikceto/.env
          EOF

      - name: Deploy to VPS
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            docker image prune -a -f
            cd ~/Tikceto          
            echo "ðŸ“¦ Pulling latest code..."
            git pull origin master
            docker compose pull
          
            echo "ðŸš€ Starting database..."
            docker compose up -d db
            
            echo "ðŸ”„ Waiting for database to be ready..."
            while ! docker compose exec db pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}; do
              sleep 2
            done
            
            echo "ðŸ”ƒ Running migrations..."
            docker compose run --rm migrate
            
            echo "ðŸš€ Starting all services..."
            docker compose up -d --remove-orphans
          EOF
