definitions:
  main.CreateRoomPayload:
    properties:
      capacity:
        minimum: 1
        type: integer
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - capacity
    - name
    type: object
  main.CreateSeatPayload:
    properties:
      number:
        minimum: 1
        type: integer
      room_id:
        minimum: 1
        type: integer
      row:
        minimum: 1
        type: integer
    required:
    - number
    - room_id
    - row
    type: object
  main.CreateSessionPayload:
    properties:
      movie_id:
        minimum: 1
        type: integer
      price:
        minimum: 0
        type: number
      room_id:
        minimum: 1
        type: integer
      start_time:
        type: string
    required:
    - movie_id
    - price
    - room_id
    - start_time
    type: object
  main.CreateTicketPayload:
    properties:
      price:
        minimum: 0
        type: number
      seat_id:
        minimum: 1
        type: integer
      session_id:
        minimum: 1
        type: integer
      user_id:
        minimum: 1
        type: integer
    required:
    - price
    - seat_id
    - session_id
    - user_id
    type: object
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 8
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.UpdateMoviePayload:
    description: string   "Description of the movie" validate:"omitempty,min=50,max=500"
    properties:
      description:
        maxLength: 500
        minLength: 50
        type: string
      duration:
        minimum: 1
        type: integer
      release_date:
        type: string
      title:
        maxLength: 100
        minLength: 3
        type: string
    type: object
  main.UpdateRoomPayload:
    properties:
      capacity:
        minimum: 1
        type: integer
      name:
        maxLength: 100
        minLength: 3
        type: string
    type: object
  main.UpdateSeatPayload:
    properties:
      row:
        minimum: 1
        type: integer
      seat_number:
        minimum: 1
        type: integer
    type: object
  main.UpdateSessionPayload:
    properties:
      movie_id:
        minimum: 1
        type: integer
      price:
        minimum: 0
        type: number
      room_id:
        minimum: 1
        type: integer
      start_time:
        type: string
    type: object
  main.UpdateTicketPayload:
    properties:
      price:
        minimum: 0
        type: number
      user_id:
        minimum: 1
        type: integer
    type: object
  store.Movie:
    properties:
      created_at:
        type: string
      description:
        type: string
      duration:
        type: integer
      id:
        type: integer
      poster_url:
        type: string
      release_date:
        type: string
      title:
        type: string
    type: object
  store.Room:
    properties:
      capacity:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
  store.Seat:
    properties:
      id:
        type: integer
      room_id:
        type: integer
      row:
        type: integer
      seat_number:
        type: integer
    type: object
  store.Session:
    properties:
      id:
        type: integer
      movie:
        $ref: '#/definitions/store.Movie'
      movie_id:
        type: integer
      price:
        type: number
      room:
        $ref: '#/definitions/store.Room'
      room_id:
        type: integer
      start_time:
        type: string
    type: object
  store.Ticket:
    properties:
      created_at:
        type: string
      id:
        type: integer
      price:
        type: number
      seat:
        $ref: '#/definitions/store.Seat'
      seat_id:
        type: integer
      session:
        $ref: '#/definitions/store.Session'
      session_id:
        type: integer
      user_id:
        type: integer
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for Tikceto
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Tikceto
paths:
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a token for a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - authentication
  /movies:
    post:
      consumes:
      - multipart/form-data
      description: Creates a movie
      parameters:
      - description: Movie poster file
        in: formData
        name: file
        required: true
        type: file
      - description: Movie title
        in: formData
        name: title
        required: true
        type: string
      - description: Movie description
        in: formData
        name: description
        required: true
        type: string
      - description: Movie duration in minutes
        in: formData
        name: duration
        required: true
        type: integer
      - description: Movie release date (YYYY-MM-DD)
        in: formData
        name: release_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Movie'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a movie
      tags:
      - movies
  /movies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a movie
      tags:
      - movies
    get:
      consumes:
      - application/json
      description: Fetches a movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Movie'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches a movie
      tags:
      - movies
    patch:
      consumes:
      - application/json
      description: Updates a movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Movie payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateMoviePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Movie'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a movie
      tags:
      - movies
  /rooms:
    post:
      consumes:
      - application/json
      description: Creates a room
      parameters:
      - description: Room payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateRoomPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Room'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a room
      tags:
      - rooms
  /rooms/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a room by ID
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a room
      tags:
      - rooms
    get:
      consumes:
      - application/json
      description: Fetches a room by ID
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Room'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches a room
      tags:
      - rooms
    patch:
      consumes:
      - application/json
      description: Updates a room by ID
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      - description: Room payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateRoomPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Room'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a room
      tags:
      - rooms
  /seats:
    post:
      consumes:
      - application/json
      description: Creates a seat in a specified room
      parameters:
      - description: Seat payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateSeatPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Seat'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a seat
      tags:
      - seats
  /seats/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a seat by ID
      parameters:
      - description: Seat ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a seat
      tags:
      - seats
    get:
      consumes:
      - application/json
      description: Fetches a seat by ID
      parameters:
      - description: Seat ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Seat'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches a seat
      tags:
      - seats
    patch:
      consumes:
      - application/json
      description: Updates a seat by ID
      parameters:
      - description: Seat ID
        in: path
        name: id
        required: true
        type: integer
      - description: Seat payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateSeatPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Seat'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a seat
      tags:
      - seats
  /sessions:
    post:
      consumes:
      - application/json
      description: Creates a session
      parameters:
      - description: Session payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateSessionPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Session'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a session
      tags:
      - sessions
  /sessions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a session by ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a session
      tags:
      - sessions
    get:
      consumes:
      - application/json
      description: Fetches a session by ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Session'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches a session
      tags:
      - sessions
    patch:
      consumes:
      - application/json
      description: Updates a session by ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: integer
      - description: Session payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateSessionPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Session'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a session
      tags:
      - sessions
  /tickets:
    post:
      consumes:
      - application/json
      description: Creates a ticket
      parameters:
      - description: Ticket payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateTicketPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Ticket'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a ticket
      tags:
      - tickets
  /tickets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a ticket by ID
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a ticket
      tags:
      - tickets
    get:
      consumes:
      - application/json
      description: Fetches a ticket by ID
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Ticket'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches a ticket
      tags:
      - tickets
    patch:
      consumes:
      - application/json
      description: Updates a ticket by ID
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: integer
      - description: Ticket payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateTicketPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Ticket'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a ticket
      tags:
      - tickets
securityDefinitions:
  ApiKeyAuth:
    description: Use the Authorization header with a Bearer token to authenticate
      API requests.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
